Zadania projekt końcowy

###landing page
welcome message (*)
Logowanie (*)

###main page:
- lista (info) podróży nadchodzących w nadchodzących 2 tygodniach (z kalendarza)
- lista (info) rezerwacji w toku (ze statusem akceptów i wysłanych notyfikacji)
- zarządzanie DB
	- zarządzaj trips
	- zarządzaj locations
	- zarządzaj employees
- wylogowanie
	Rejestracja nowego użytkownika
	
	CRUD danych do każdej tabeli

###user page
- tylko swoje podróże (widok)
- zostawianie komentarza dla przyszłych
- akcept dla najbliższej podróży (z warunkiem deadline)


###funkcjonalności
- faker procedury do wypełnienia bazy danych
- kalendarz ze zdefiniowanymi triggerami
- Wysyłanie maili
	- o nadchodzących podróżach
	- o konieczności zatwierdzenia (employee)
	- o konieczności zatwierdzenia (supervisor)
- bootstrap
- testy




###Notatki i info developer
superuser:
pawel
DJANGO User name:  pawel.mariusz.kowalik@gmail.com
password: 12_travelplanner


Supervisor:
DJANGO User name:  Supervisor  |  password:  12_travelplanner
Gmail account:  supervisortravels@gmail.com  |  password:  12_travelplanner

Coordinator:
DJANGO User name:  Coordinator  |  password:  11_travelplanner
Gmail account:  supervisortravels@gmail.com  |  password:  12_travelplanner

users:
employee1
12employee1
Jan
Kowalski
jan.kowalski@op.pl

employee3
1coronavirus
Adam
Mickiewicz
a.mickiewicz@gmail.com

email do wysyłania notyfikacji:
travel_planner_notifications@gmail.com
pass: 11_Travel_planner_admin






import requests
username = 'pawelkowalik'
token = '34f6961d165da5ad44690ad98a6d42916d8a16a7'

response = requests.get(
  'https://www.pythonanywhere.com/api/v0/user/{username}/cpu/'.format(
      username=username
  ),
  headers={'Authorization': 'Token {token}'.format(token=token)}
)
if response.status_code == 200:
  print('CPU quota info:')
  print(response.content)
else:
  print('Got unexpected status code {}: {!r}'.format(response.status_code, response.content))


*******************************************
PYTHONANYWHERE
*******************************************

Wdrażanie na pythonanywhere:
w konsoli bash wpisujemy komendę która automatycznie pobierze z githuba repo i zainstaluje na pythonanywhere:
pa_autoconfigure_django.py https://github.com/p-kowalik/Team_travels_planner.git 

jeśli istnieje aplikacja o tej nazwie (niedziałająca - do zastąpienia) to należy ją usunąć opcją nuke:
pa_autoconfigure_django.py --nuke https://github.com/p-kowalik/Team_travels_planner.git

Virtual environment (on/off):
workon <my-virt-environmnet>
deactivate



Migracja z Postgres na MySQL
1. Instalacja MySQL Workbench na lokalnej maszynie (https://mysqlworkbench.org/2012/11/how-to-migrate-postgresql-databases-to-mysql-using-the-mysql-workbench-migration-wizard/)
2. Instalacja PostgreSQL ODBC driver (http://mysqlworkbench.org/2012/11/set-up-and-configure-postgresql-odbc-drivers-for-the-mysql-workbench-migration-wizard/)
3. 


Generowanie i dodawanie losowych danych do bazy danych. Używamy konsoli pythonowej (nie połączonej z DB).
(my-virtualenv) 10:28 ~/Team_travels_planner (master)$ python manage.py populate_ccaeh 



*******************************************
GITHUB PAGES
*******************************************
TYLKO DLA STRON STATYCZNYCH - NIE DZIAŁA DLA APLIKACJI DJANGO

Repozytorium -> settings -> github pages -> source (select Master branch)


*******************************************
HEROKU
*******************************************
Django-Heroku - biblioteka służąca do wdrażania aplikacji Django na Heroku.

Ustawianie wersji Pythona pod którą działa projekt:
add a runtime.txt file to your app’s root directory that declares the exact version number to use:
$ touch runtime.txt
$ cat >> runtime.txt
python-3.7.2
ctrl+D


settings.py, at the very bottom:

…
# Configure Django App for Heroku.
import django_heroku
django_heroku.settings(locals())


# instalacja heroku w konsoli:
sudo snap install heroku --classic

# logowanie do heroku w konsoli:
heroku login

# clone projekt z github (powinien zawierać runtime.txt z wersją Pythona + requirements.txt)
git clone https://github.com/heroku/<nazwa_projektu.git>
cd <nazwa projektu>

# tworzenie aplikacji na heroku - uruchamiane z katalogu root aplikacji (nazwa będzie nadana losowo)
heroku create

Creating app... done, ⬢ whispering-lake-37789
https://whispering-lake-37789.herokuapp.com/ | https://git.heroku.com/whispering-lake-37789.git

# sprawdzanie czy nowe repozytorium na heroku jest dostępne (może nie być jeśli apka na heroku była usuwana i jest instalowane ponownie)
git remote -v
# jeśli jej nie ma:
https://stackoverflow.com/questions/34379130/pushing-to-heroku-fails-no-such-app-fatal
git remote rm heroku
git remote add heroku https://git.heroku.com/<nazwa_apki>.git

# 

# uruchamianie aplikacji z konsoli
heroku open

# konfiguracja plików statycznych
python manage.py collectstatic



















